apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "org.unicef.ecar.bebbo"
    flavorDimensions "default"
    defaultConfig {
        applicationId "org.unicef.ecar.bebbo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "0.1.0"
    }

    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
         bebboDev {
           if (project.hasProperty('MYAPP_DEV_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_DEV_UPLOAD_STORE_FILE)
                storePassword MYAPP_DEV_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_DEV_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_DEV_UPLOAD_KEY_PASSWORD
            }
        }
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        xk {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE_FOLEJA')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE_FOLEJA)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD_FOLEJA
                keyAlias MYAPP_UPLOAD_KEY_ALIAS_FOLEJA
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD_FOLEJA
            }
        }
         bangla {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE_BANGLA')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE_BANGLA)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD_BANGLA
                keyAlias MYAPP_UPLOAD_KEY_ALIAS_BANGLA
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD_BANGLA
            }
        }
        merhababebek {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE_MERHABA_BEBEK')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE_MERHABA_BEBEK)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD__MERHABA_BEBEK
                keyAlias MYAPP_UPLOAD_KEY_ALIAS_MERHABA_BEBEK
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD__MERHABA_BEBEK
            }
        }
        wawamor {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE_WAWAMOR')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE_WAWAMOR)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD_WAWAMOR
                keyAlias MYAPP_UPLOAD_KEY_ALIAS_WAWAMOR
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD_WAWAMOR
            }
        }
        reraiumtwana {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE_RERAI_UMTWANA')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE_RERAI_UMTWANA)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD__RERAI_UMTWANA
                keyAlias MYAPP_UPLOAD_KEY_ALIAS_RERAI_UMTWANA
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD__RERAI_UMTWANA
            }
        }
    }

    // packagingOptions {
    //     pickFirst 'lib/*/libfbjni.so'
    //     pickFirst 'lib/*/libc++_shared.so'
    //     pickFirst 'lib/*/libhermes.so'
    // }
    // Splits block if needed
    splits {
        abi {
            enable true
            reset()
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64", "arm64-v8a-16k", "x86_64-16k"
            universalApk true
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            ndk.debugSymbolLevel = "FULL"
        }
    }

    productFlavors {
        prod {
            applicationId 'org.unicef.ecar.bebbo'
            versionCode 44
            versionName "2.3.3"
            signingConfig signingConfigs.release
        }
        prodstaging {
            applicationId 'org.unicef.bebbodev'
            versionCode 1
            versionName "1.0.0"
            signingConfig signingConfigs.bebboDev
        }
        xk {
            applicationId 'org.unicef.kosovo.foleja'
            versionCode 12
            versionName "1.3.0"
            signingConfig signingConfigs.xk
        }
        xkstaging {
            applicationId 'com.datamatics.foleja'
            versionCode 2
            versionName "0.3.1"
            signingConfig signingConfigs.xk
        }
        bangla {
            applicationId 'org.unicef.bangladesh.babuni'
            versionCode 1
            versionName "1.0.0"
            signingConfig signingConfigs.bangla
        }
        merhababebek {
            applicationId 'org.unicef.ecar.merhababebek'
            versionCode 3
            versionName "1.0.1"
            signingConfig signingConfigs.merhababebek
        }
        wawamor {
            applicationId 'org.unicef.ec.wawamor'
            versionCode 9
            versionName "1.0.3"
            signingConfig signingConfigs.wawamor
        }
        reraiumtwana {
            applicationId 'org.unicef.zw.reraiumtwana'
            versionCode 1
            versionName "1.0.0"
            signingConfig signingConfigs.reraiumtwana
        }
        banglastaging {
            applicationId 'com.datamatics.bangla'
            versionCode 1
            versionName "1.0.0"
            signingConfig signingConfigs.bangla
        }
    }
}

androidComponents {
    onVariants(selector().all()) { variant ->
        def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]

        variant.outputs.each { output ->
            def abiFilter = output.filters.find { it.filterType == "ABI" }
            if (abiFilter != null) {
                def abi = abiFilter.identifier
                output.versionCode.set(versionCodes.get(abi) * 1048576 + defaultConfig.versionCode)
            }
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
