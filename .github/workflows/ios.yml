name: iOS Build
on:
  # create:
  #   tags:
  #     - v*
  push:
    branches: 
      - Development
    
  workflow_dispatch:


env:
        WORKSPACE: ${{ 'ios/ParentBuddyApp.xcworkspace' }}
        SCHEME: ${{ 'ParentBuddyAppDev' }}
        CONFIGURATION: ${{ 'Release' }}
        ARCHIVE_PATH: ${{ 'ios/build/ParentBuddyApp.xcarchive' }}
        EXPORT_PATH_STAGING: ${{ 'ParentBuddyAppDev/' }}
        PLIST_PATH_STAGING: ${{'ios/ParentBuddyAppDev-Info.plist' }}
        ARTIFACT_NAME: ${{ 'Bebbo.ipa' }}
        ARTIFACT_PATH_STAGING: ${{ 'ParentBuddyAppDev/' }}
        APP_NAME_STAGING: ${{ 'ParentBuddyAppDev-iOS/ENV_DEV' }}
        TESTING_GROUP_STAGING: ${{ 'ENV_DEV' }}
        UPLOAD_FILE_STAGING: ${{ 'ParentBuddyAppDev/BebboDev.ipa' }}
        DEVELOPMENT_CERTIFICATE: ${{ secrets.APPLE_APP_DEVELOPMENT_CERTIFICATE }}
        CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        DISTRIBUTION_PROFILE_STAGING: ${{ secrets.APPLE_AD_HOC_PROFILE }}
        KEY_PWD: ${{ secrets.APPLE_KEY_PWD }}

        SCHEME_PROD: ${{ 'ParentBuddyApp' }}
        EXPORT_PATH_PROD: ${{ 'prod/' }}
        PLIST_PATH_PROD: ${{'ios/ParentBuddyApp/Info.plist' }}
        ARTIFACT_PATH_PROD: ${{ 'prod/' }}
        APP_NAME_PROD: ${{ 'ParentBuddyApp-iOS/ENV_PROD' }}
        TESTING_GROUP_PROD: ${{ 'ENV_PROD' }}
        UPLOAD_FILE_PROD: ${{ 'prod/Bebbo.ipa' }}
        DISTRIBUTION_CERTIFICATE: ${{ secrets.APPLE_APP_DISTRIBUTION_CERTIFICATE }}
        DISTRIBUTION_PROFILE_PROD: ${{secrets.APPLE_DISTRIBUTION_PROFILE }}

  
jobs:
  build:
    runs-on: macOS-latest
    # timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v2
       
      - uses: actions/setup-node@master
        with:
          node-version: '21.2.0'
        
      - name: Install dependencies
        run: npm install
      
      - name: 'Create env file'
        run: |
          touch .env
          echo apiUrlDevelop=${{ secrets.APIURLDEVELOP }} >> .env
          echo facebookAppDisplayName=${{ secrets.FACEBOOKAPPDISPLAYNAME }} >> .env
          echo facebookAppId=${{ secrets.FACEBOOKAPPID }} >> .env
          echo facebookClientToken=${{ secrets.FACEBOOKCLIENTTOKEN }} >> .env
          echo projectNumber=${{ secrets.PROJECTNUMBER }} >> .env
          echo clientIdKey=${{ secrets.CLIENTIDKEY }} >> .env
       
                
      - name: Putting data google service Dev file
        env:
          DATA: ${{ secrets.GOOGLE_SERVICES_PLIST_DEV }}
        run: |
          touch /Users/runner/work/parenting-app-bebbo-mobile/parenting-app-bebbo-mobile/ios/GoogleServices/Development/GoogleService-Info.plist
          echo -n $DATA | base64 -d > /Users/runner/work/parenting-app-bebbo-mobile/parenting-app-bebbo-mobile/ios/GoogleServices/Development/GoogleService-Info.plist
       
      - name: Putting data google service prod file
        env:
          DATA: ${{ secrets.GOOGLE_SERVICES_PLIST_PROD }}
        run: |
          touch /Users/runner/work/parenting-app-bebbo-mobile/parenting-app-bebbo-mobile/ios/GoogleServices/Production/GoogleService-Info.plist
          echo -n $DATA | base64 -d > /Users/runner/work/parenting-app-bebbo-mobile/parenting-app-bebbo-mobile/ios/GoogleServices/Production/GoogleService-Info.plist

      - name: Install pod dependencies
        run: | 
          cd ios && pod install --repo-update

      - name: Signing & Provisioning
        run: |
          # create variables
          DEV_CERT_PATH=$RUNNER_TEMP/dev_certificate.p12
          PP_PATH_STAGING=$RUNNER_TEMP/dist_pp_adc.mobileprovision
          KCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # CERT_PATH=$RUNNER_TEMP/dist_certificate.p12
          # PP_PATH_PROD=$RUNNER_TEMP/dist_pp.mobileprovision
  
          # import certificate and provisioning profile from secrets
          # echo -n "$DISTRIBUTION_CERTIFICATE" | base64 --decode --output "$CERT_PATH"
          # echo -n "$DISTRIBUTION_PROFILE_PROD" | base64 --decode --output "$PP_PATH_PROD"
          
          echo -n "$DEVELOPMENT_CERTIFICATE" | base64 -Dd -o "$DEV_CERT_PATH"
          echo -n "$DISTRIBUTION_PROFILE_STAGING" | base64 -Dd -o "$PP_PATH_STAGING"
          
          # create temporary keychain
          security create-keychain -p "$KEY_PWD" "$KCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KCHAIN_PATH"
          security unlock-keychain -p "$KEY_PWD" "$KCHAIN_PATH"
          
          # import certificate to keychain
          security import "$DEV_CERT_PATH" -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KCHAIN_PATH"
          # security import "$CERT_PATH" -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k "$KCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEY_PWD" "$KCHAIN_PATH"
          security list-keychain -d user -s "$KCHAIN_PATH"
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PP_PATH_STAGING" ~/Library/MobileDevice/Provisioning\ Profiles
          # cp "$PP_PATH_PROD" ~/Library/MobileDevice/Provisioning\ Profiles
          
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_15.1.app
     
      - name: Xcode Version
        run: /usr/bin/xcodebuild -version
      
      - name: Create build folder
        run: |
          mkdir -p build && mkdir -p staging && mkdir -p prod


      - name: Clean project
        run: xcodebuild clean -scheme "$SCHEME" -project /Users/runner/work/parenting-app-bebbo-mobile/parenting-app-bebbo-mobile/ios/ParentBuddyApp.xcodeproj

      - name: Clear Derived Data
        run : rm -rf ~/Library/Developer/Xcode/DerivedData
        
      # - name: Build Project
      #   run: xcodebuild build -scheme "$SCHEME" \
      #     -project /Users/runner/work/parenting-app-bebbo-mobile/parenting-app-bebbo-mobile/ios/ParentBuddyApp.xcodeproj \
      #     -destination 'platform=iOS,name=iPhone' BUILD_LIBRARY_FOR_DISTRIBUTION=YES SKIP_INSTALL=NO
       

      - name: Build Archive
        run:  xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration "$CONFIGURATION" -destination 'platform=iOS,name=iPhone' ENABLE_BITCODE=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES SKIP_INSTALL=NO OTHER_SWIFT_FLAGS=-no-verify-emitter-module-interface
          
        # -allowProvisioningUpdates PROVISIONING_STYLE="Manual" \
          # PROVISIONING_PROFILE="$DISTRIBUTION_PROFILE_STAGING" CODE_SIGN_STYLE="Manual" CODE_SIGN_IDENTITY="$DEVELOPMENT_CERTIFICATE" 

        # CODE_SIGNING_ALLOWED=NO \   archive -archivePath "$ARCHIVE_PATH"
          
        # xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME_PROD" -configuration "$CONFIGURATION" \
          # archive -archivePath "$ARCHIVE_PATH" -allowProvisioningUpdates \
          # PROVISIONING_STYLE="Manual" \
          # PROVISIONING_PROFILE="$DISTRIBUTION_PROFILE_PROD" \
          # CODE_SIGN_STYLE="Manual" \
          # CODE_SIGN_IDENTITY="$DISTRIBUTION_CERTIFICATE"
          
          
          # xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration "$CONFIGURATION" \
          # archive -archivePath "$ARCHIVE_PATH" -allowProvisioningUpdates PROVISIONING_STYLE="Manual" \
          # PROVISIONING_PROFILE="$DISTRIBUTION_PROFILE_STAGING" \
          # CODE_SIGN_STYLE="Manual" CODE_SIGN_IDENTITY="$DEVELOPMENT_CERTIFICATE" 
          
          
      - name: Export STAGING
        run: |
          xcodebuild -exportArchive -archivePath "$ARCHIVE_PATH" -exportPath "$EXPORT_PATH_STAGING" . -exportOptionsPlist "$PLIST_PATH_STAGING"
      
      # - name: Export PROD
      #   run: |
      #     xcodebuild -exportArchive -archivePath "$ARCHIVE_PATH" -exportPath "$EXPORT_PATH_PROD" . -exportOptionsPlist "$PLIST_PATH_PROD"
        
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Bebbo.ipa
          path: ${{ env.ARTIFACT_PATH_STAGING }} 

#            name: ${{ env.ARTIFACT_NAME }}
 #           path: |
              #${{ env.ARTIFACT_PATH_STAGING }}
              #${{ env.ARTIFACT_PATH_PROD }}

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/dist_pp_adc.mobileprovision
        # rm ~/Library/MobileDevice/Provisioning\ Profiles/dist_pp.mobileprovision
    
