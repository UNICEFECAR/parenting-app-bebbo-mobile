name: iOS Build
on:
  push:
    branches: 
      - Development
    
  workflow_dispatch:

env:
        ARTIFACT_PATH_STAGING: ${{ 'ParentBuddyAppDev/' }}
        CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        KEY_PWD: ${{ secrets.APPLE_KEY_PWD }}
        DISTRIBUTION_CERTIFICATE: ${{ secrets.APPLE_APP_DISTRIBUTION_CERTIFICATE }}
        DISTRIBUTION_PROFILE_PROD: ${{secrets.APPLE_DISTRIBUTION_PROFILE }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
jobs:
  build:
    runs-on: macOS-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v2
       
      - uses: actions/setup-node@master
        with:
          node-version: '21.2.0'
        
      # - name: Install dependencies
      #   run: npm install
      
      # - name: 'Create env file'
      #   run: |
      #     touch .env
      #     echo apiUrlDevelop=${{ secrets.APIURLDEVELOP }} >> .env
      #     echo facebookAppDisplayName=${{ secrets.FACEBOOKAPPDISPLAYNAME }} >> .env
      #     echo facebookAppId=${{ secrets.FACEBOOKAPPID }} >> .env
      #     echo facebookClientToken=${{ secrets.FACEBOOKCLIENTTOKEN }} >> .env
      #     echo projectNumber=${{ secrets.PROJECTNUMBER }} >> .env
      #     echo clientIdKey=${{ secrets.CLIENTIDKEY }} >> .env
       
      # - name: Putting data google service Dev file
      #   env:
      #     DATA: ${{ secrets.GOOGLE_SERVICES_PLIST_DEV }}
      #   run: |
      #     touch /Users/runner/work/parenting-app-bebbo-mobile/parenting-app-bebbo-mobile/ios/GoogleServices/Development/GoogleService-Info.plist
      #     echo -n $DATA | base64 -d > /Users/runner/work/parenting-app-bebbo-mobile/parenting-app-bebbo-mobile/ios/GoogleServices/Development/GoogleService-Info.plist
       
      # - name: Install CocoaPods
      #   run: |
      #     sudo gem install cocoapods

      # - name: Set environment variable for modular headers
      #   run: echo "USE_MODULAR_HEADERS=true" >> $GITHUB_ENV

      # - name: Modify Podfile for Modular Headers
      #   run: |
      #     cd ios  # Update this path if necessary
      #     sed -i '' '1s/^/if ENV["USE_MODULAR_HEADERS"] == "true"\nuse_modular_headers!\nend\n\n/' Podfile
      #     cat Podfile

      # - name: Install pod dependencies
      #   run: | 
      #     cd ios && rm -rf Pods Podfile.lock && pod install --repo-update

      # - name: Authenticate with Apple Developer account
      #   env:
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      #   run: |
      #     echo "machine apple.com login $APPLE_ID password $APP_SPECIFIC_PASSWORD" > ~/.netrc
      #     security add-internet-password -a $APPLE_ID -s idmsa.apple.com -w $APP_SPECIFIC_PASSWORD -T /usr/bin/security

      - name: Signing & Provisioning
        run: |
          # Decode and install certificate
          # echo -n "$DISTRIBUTION_CERTIFICATE" | base64 -Dd -o certificate.p12
          # security import certificate.p12 -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          # security set-key-partition-list -S apple-tool:,apple: -s -k $CERTIFICATE_PASSWORD ~/Library/Keychains/login.keychain-db

          # Install provisioning profile
          echo -n "$DISTRIBUTION_PROFILE_PROD" | base64 -Dd -o provisioning_profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(security cms -D -i provisioning_profile.mobileprovision | plutil -extract UUID raw -)
          mv provisioning_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain ~/Library/Keychains/login.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles

